This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-06T00:57:35.142Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
src/
  whill-ctrl/
    __main__.py
.gitignore
.python-version
pyproject.toml
uv.lock

================================================================
Files
================================================================

================
File: src/whill-ctrl/__main__.py
================
#!/usr/bin/env python3
"""
WHILL OSC Controller

This script starts an OSC server that listens for WHILL control commands,
including joystick control and power commands, and forwards them to a WHILL device.
The joystick callback interprets the first parameter as 'side' and the second as 'front'.
"""

import asyncio
import asyncclick as click
from pythonosc.dispatcher import Dispatcher
from pythonosc.osc_server import AsyncIOOSCUDPServer


# Define an abstract interface for WHILL operations.
class AbstractWHILL:
    def send_joystick(self, *, front: int, side: int) -> None:
        """Send joystick command with given front and side values."""
        raise NotImplementedError

    def send_power_on(self) -> None:
        """Send power on command."""
        raise NotImplementedError

    def send_power_off(self) -> None:
        """Send power off command."""
        raise NotImplementedError

    def send_emergency_stop(self) -> None:
        """Send emergency stop command (typically set velocity to 0)."""
        raise NotImplementedError


# Real implementation using the WHILL Python SDK.
# (Refer to WHILL/pywhill documentation for details.)
try:
    from whill import (
        ComWHILL,
    )  #  [oai_citation_attribution:0‡github.com](https://github.com/WHILL/pywhill)
except ImportError:
    ComWHILL = None


class RealWHILL(AbstractWHILL):
    def __init__(self, port: str) -> None:
        if ComWHILL is None:
            raise ImportError("whill Python SDK is not installed.")
        self.device = ComWHILL(port=port)
        print(f"Connected to WHILL device on port {port}")

    def send_joystick(self, *, front: int, side: int) -> None:
        print(f"Sending joystick command: front={front}, side={side}")
        self.device.send_joystick(front=front, side=side)

    def send_power_on(self) -> None:
        print("Sending power on command")
        self.device.send_power_on()

    def send_power_off(self) -> None:
        print("Sending power off command")
        self.device.send_power_off()

    def send_emergency_stop(self) -> None:
        print("Sending emergency stop command")
        # For example, an emergency stop might be implemented by setting both speeds to 0.
        self.device.send_joystick(front=0, side=0)


# Mock implementation for testing without real hardware.
class MockWHILL(AbstractWHILL):
    def __init__(self, port: str) -> None:
        self.port = port
        print(f"Using mock WHILL on port {port}")

    def send_joystick(self, *, front: int, side: int) -> None:
        print(f"[Mock] Joystick command received: front={front}, side={side}")

    def send_power_on(self) -> None:
        print("[Mock] Power on command received")

    def send_power_off(self) -> None:
        print("[Mock] Power off command received")

    def send_emergency_stop(self) -> None:
        print("[Mock] Emergency stop command received (set velocity to 0)")


# Controller that sets up OSC message mappings.
class WhillOSCController:
    def __init__(self, whill: AbstractWHILL) -> None:
        self.whill = whill
        self.dispatcher = Dispatcher()
        self.register_callbacks()

    def register_callbacks(self) -> None:
        """
        Register OSC callbacks for joystick control and power commands.
        """
        self.dispatcher.map("/whill/joystick", self.osc_joystick_callback)
        self.dispatcher.map("/whill/power_on", self.power_on_callback)
        self.dispatcher.map("/whill/power_off", self.power_off_callback)
        self.dispatcher.map("/whill/emergency_stop", self.emergency_stop_callback)

    def osc_joystick_callback(self, address: str, *args) -> None:
        """
        OSC callback to handle joystick messages.
        Expects at least two arguments.
        Interprets:
          - First argument as 'side'
          - Second argument as 'front'
        """
        try:
            if len(args) < 2:
                raise ValueError("At least 2 parameters required: x and y values.")
            # OSCからの値は -1 ～ 1 のスケールなので、100倍して -100 ～ 100 に変換する
            x_raw, y_raw = args[0], args[1]
            side = int(round(x_raw * 100))
            front = int(round(y_raw * 100))
            # 念のため範囲を -100～100 にクリッピングする
            side = max(min(side, 100), -100)
            front = max(min(front, 100), -100)
            print(
                f"[{address}] Received x: {x_raw}, y: {y_raw} => side: {side}, front: {front}"
            )
            self.whill.send_joystick(front=front, side=side)
        except Exception as e:
            print(f"Error in OSC joystick callback: {e}")

    def power_on_callback(self, address: str, *args) -> None:
        print(f"[{address}] Power on command received")
        self.whill.send_power_on()

    def power_off_callback(self, address: str, *args) -> None:
        print(f"[{address}] Power off command received")
        self.whill.send_power_off()

    def emergency_stop_callback(self, address: str, *args) -> None:
        print(f"[{address}] Emergency stop command received")
        self.whill.send_emergency_stop()


# Command-line interface using asyncclick.
@click.command()
@click.option(
    "--serial-port",
    type=str,
    required=True,
    help="Serial port for the WHILL device (e.g. /dev/ttyUSB0)",
)
@click.option(
    "--osc-ip",
    type=str,
    default="127.0.0.1",
    show_default=True,
    help="IP address on which to bind the OSC server (default: 127.0.0.1)",
)
@click.option(
    "--osc-port",
    type=int,
    default=5005,
    show_default=True,
    help="Port number for the OSC server (default: 5005)",
)
@click.option(
    "--use-mock",
    is_flag=True,
    default=False,
    help="Use the mock WHILL implementation instead of the actual device",
)
async def main(serial_port, osc_ip, osc_port, use_mock):
    """
    WHILL OSC Controller

    This script sets up an OSC server that listens for commands on addresses:
      /whill/joystick   -> expects two numbers; interprets x as 'side' and y as 'front'
      /whill/power_on   -> turns on the WHILL
      /whill/power_off  -> turns off the WHILL
      /whill/emergency_stop -> stops the WHILL immediately (e.g. set velocity to 0)

    Serial port and OSC network settings are provided as command-line options.
    """
    # Initialize the WHILL instance.
    if use_mock:
        whill_instance = MockWHILL(serial_port)
    else:
        try:
            whill_instance = RealWHILL(serial_port)
        except Exception as e:
            print(f"Failed to initialize WHILL device: {e}")
            return

    # Create the OSC controller.
    controller = WhillOSCController(whill_instance)

    # Set up the asynchronous OSC UDP server.
    server = AsyncIOOSCUDPServer(
        (osc_ip, osc_port), controller.dispatcher, asyncio.get_running_loop()
    )
    transport, protocol = await server.create_serve_endpoint()
    print(f"OSC Server started on {osc_ip}:{osc_port}")

    try:
        # Keep the server running indefinitely.
        while True:
            await asyncio.sleep(1)
    except KeyboardInterrupt:
        print("Shutting down OSC server.")
    finally:
        transport.close()


if __name__ == "__main__":
    main(_anyio_backend="asyncio")

================
File: .gitignore
================
# Python-generated files
__pycache__/
*.py[oc]
build/
dist/
wheels/
*.egg-info

# Virtual environments
.venv

================
File: .python-version
================
3.13

================
File: pyproject.toml
================
[project]
name = "whill-ctrl"
version = "0.1.0"
description = "Add your description here"
authors = ["eotel <49769982+Eotel@users.noreply.github.com>"]
readme = "README.md"
packages = [
    { include = "whill-ctrl" },
]
package-dir = { "" = "src" }

requires-python = ">=3.13"
dependencies = [
    "asyncclick>=8.1.8",
    "python-osc>=1.9.3",
    "whill>=1.4.0",
]

================
File: uv.lock
================
version = 1
requires-python = ">=3.13"

[[package]]
name = "anyio"
version = "4.8.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "idna" },
    { name = "sniffio" },
]
sdist = { url = "https://files.pythonhosted.org/packages/a3/73/199a98fc2dae33535d6b8e8e6ec01f8c1d76c9adb096c6b7d64823038cde/anyio-4.8.0.tar.gz", hash = "sha256:1d9fe889df5212298c0c0723fa20479d1b94883a2df44bd3897aa91083316f7a", size = 181126 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/46/eb/e7f063ad1fec6b3178a3cd82d1a3c4de82cccf283fc42746168188e1cdd5/anyio-4.8.0-py3-none-any.whl", hash = "sha256:b5011f270ab5eb0abf13385f851315585cc37ef330dd88e27ec3d34d651fd47a", size = 96041 },
]

[[package]]
name = "asyncclick"
version = "8.1.8"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "anyio" },
    { name = "colorama", marker = "sys_platform == 'win32'" },
]
sdist = { url = "https://files.pythonhosted.org/packages/cb/b5/e1e5fdf1c1bb7e6e614987c120a98d9324bf8edfaa5f5cd16a6235c9d91b/asyncclick-8.1.8.tar.gz", hash = "sha256:0f0eb0f280e04919d67cf71b9fcdfb4db2d9ff7203669c40284485c149578e4c", size = 232900 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/14/cc/a436f0fc2d04e57a0697e0f87a03b9eaed03ad043d2d5f887f8eebcec95f/asyncclick-8.1.8-py3-none-any.whl", hash = "sha256:eb1ccb44bc767f8f0695d592c7806fdf5bd575605b4ee246ffd5fadbcfdbd7c6", size = 99093 },
    { url = "https://files.pythonhosted.org/packages/92/c4/ae9e9d25522c6dc96ff167903880a0fe94d7bd31ed999198ee5017d977ed/asyncclick-8.1.8.0-py3-none-any.whl", hash = "sha256:be146a2d8075d4fe372ff4e877f23c8b5af269d16705c1948123b9415f6fd678", size = 99115 },
]

[[package]]
name = "colorama"
version = "0.4.6"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/d8/53/6f443c9a4a8358a93a6792e2acffb9d9d5cb0a5cfd8802644b7b1c9a02e4/colorama-0.4.6.tar.gz", hash = "sha256:08695f5cb7ed6e0531a20572697297273c47b8cae5a63ffc6d6ed5c201be6e44", size = 27697 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/d1/d6/3965ed04c63042e047cb6a3e6ed1a63a35087b6a609aa3a15ed8ac56c221/colorama-0.4.6-py2.py3-none-any.whl", hash = "sha256:4f1d9991f5acc0ca119f9d443620b77f9d6b33703e51011c16baf57afb285fc6", size = 25335 },
]

[[package]]
name = "idna"
version = "3.10"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/f1/70/7703c29685631f5a7590aa73f1f1d3fa9a380e654b86af429e0934a32f7d/idna-3.10.tar.gz", hash = "sha256:12f65c9b470abda6dc35cf8e63cc574b1c52b11df2c86030af0ac09b01b13ea9", size = 190490 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/76/c6/c88e154df9c4e1a2a66ccf0005a88dfb2650c1dffb6f5ce603dfbd452ce3/idna-3.10-py3-none-any.whl", hash = "sha256:946d195a0d259cbba61165e88e65941f16e9b36ea6ddb97f00452bae8b1287d3", size = 70442 },
]

[[package]]
name = "pyserial"
version = "3.5"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/1e/7d/ae3f0a63f41e4d2f6cb66a5b57197850f919f59e558159a4dd3a818f5082/pyserial-3.5.tar.gz", hash = "sha256:3c77e014170dfffbd816e6ffc205e9842efb10be9f58ec16d3e8675b4925cddb", size = 159125 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/07/bc/587a445451b253b285629263eb51c2d8e9bcea4fc97826266d186f96f558/pyserial-3.5-py2.py3-none-any.whl", hash = "sha256:c4451db6ba391ca6ca299fb3ec7bae67a5c55dde170964c7a14ceefec02f2cf0", size = 90585 },
]

[[package]]
name = "python-osc"
version = "1.9.3"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/1e/6e/770a91c92e4e8db6213764fb78531dd26a4982000d9b325881f3599835e2/python_osc-1.9.3.tar.gz", hash = "sha256:bd0fa40def43ce509894709feb0e18f02192aca192c5e6c8fe2ba69e58f21794", size = 33328 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/57/04/01b3de6a7565cfc20f3bf4fce959b099ad30a08157865436d48cc02f6c08/python_osc-1.9.3-py3-none-any.whl", hash = "sha256:7def2075be72f07bae5a4c1a55cc7d907b247f4a5d910f3159ed30ac2b1f17cc", size = 43808 },
]

[[package]]
name = "sniffio"
version = "1.3.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/a2/87/a6771e1546d97e7e041b6ae58d80074f81b7d5121207425c964ddf5cfdbd/sniffio-1.3.1.tar.gz", hash = "sha256:f4324edc670a0f49750a81b895f35c3adb843cca46f0530f79fc1babb23789dc", size = 20372 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/e9/44/75a9c9421471a6c4805dbf2356f7c181a29c1879239abab1ea2cc8f38b40/sniffio-1.3.1-py3-none-any.whl", hash = "sha256:2f6da418d1f1e0fddd844478f41680e794e6051915791a034ff65e5f100525a2", size = 10235 },
]

[[package]]
name = "whill"
version = "1.4.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "pyserial" },
]
sdist = { url = "https://files.pythonhosted.org/packages/f7/60/1a3a5ba6b341f365292ce12e5b9562675bea8150478196871dfd4d8b2b99/whill-1.4.0.tar.gz", hash = "sha256:d1f48c16225887c66a484356bfef0ea20aaf0cada77a59af97fa7d32b84f02b8", size = 9054 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/dc/e0/7fa782565887abe9169535ce41269ae39d017fea8f23a50018650bdfbcaf/whill-1.4.0-py3-none-any.whl", hash = "sha256:e33bbddd1cbf389950697379224aa8eb225b11fbd506e3d1e50efec3afb23511", size = 8068 },
]

[[package]]
name = "whill-ctrl"
version = "0.1.0"
source = { virtual = "." }
dependencies = [
    { name = "asyncclick" },
    { name = "python-osc" },
    { name = "whill" },
]

[package.metadata]
requires-dist = [
    { name = "asyncclick", specifier = ">=8.1.8" },
    { name = "python-osc", specifier = ">=1.9.3" },
    { name = "whill", specifier = ">=1.4.0" },
]
